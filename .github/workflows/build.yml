name: Build

on:
  push:
    branches:
      - master
  pull_request:
  workflow_dispatch: # allows to be run manually
  workflow_call: # when called from another workflow
    inputs:
      checkout_ref:
        required: true
        type: string
    outputs:
      production_artifact_name:
        value: ${{ jobs.build.outputs.production_artifact_name }}

env:
  PREPARED_NODE_MODULES_ARTIFACT_NAME: node_modules
  PRODUCTION_ARTIFACT_NAME: dist
  DEVELOPMENT_ARTIFACT_NAME: dist-development

jobs:
  prepare_cache:
    name: Prepare cache
    # to populate the cache for the following jobs that have this one in 'needs'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Clone repository
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.checkout_ref }}
      - name: Prepare the project
        uses: ./.github/actions/prepare
        with:
          save-cache: true
  build_dev:
    name: Build development version
    needs: prepare_cache
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Clone repository
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.checkout_ref }}
      - name: Prepare the project
        uses: ./.github/actions/prepare
      - name: Build add-on (development version)
        run: make build_in_container
        env:
          MODE: development
      - name: Save built add-on (development version)
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.DEVELOPMENT_ARTIFACT_NAME }}
          path: dist
          retention-days: 30
  build:
    name: Build production version
    needs: prepare_cache
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Clone repository
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.checkout_ref }}
      - name: Prepare the project
        uses: ./.github/actions/prepare
      - name: Build add-on
        run: make build_in_container
      - name: Save built add-on
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.PRODUCTION_ARTIFACT_NAME }}
          path: dist
          retention-days: 30
    outputs:
      production_artifact_name: ${{ env.PRODUCTION_ARTIFACT_NAME }}
  test:
    name: Run tests
    needs: prepare_cache
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Clone repository
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.checkout_ref }}
      - name: Prepare the project
        uses: ./.github/actions/prepare
      - name: Run tests
        run: make test_in_container
      - name: Upload code coverage to Codecov
        uses: codecov/codecov-action@v3
  generated_code_consistency:
    name: Verify generated code is consistent
    needs: prepare_cache
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Clone repository
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.checkout_ref }}
      - name: Prepare the project
        uses: ./.github/actions/prepare
      - name: Generate GraphQL code
        run: make graphql_generate
      - name: Check changes in generated code
        run: |
          git status
          git diff
          UNCOMMITTED_CHANGES="$(git status --porcelain)"
          if [ -n "${UNCOMMITTED_CHANGES}" ]; then
            echo 'Found uncommitted changes' >&2
            exit 1
          fi
  required_pre_merge_status_checks_marker:
    name: Status checks required before merge (marker)
    needs:
      - build_dev
      - build
      - test
      - generated_code_consistency
    if: github.event_name == 'pull_request' && success()
    runs-on: ubuntu-latest
    timeout-minutes: 1
    steps:
      - name: Mark all required status checks were successful
        id: marker
        run: echo "success=true" >> $GITHUB_OUTPUT
    outputs:
      success: ${{ steps.marker.outputs.success }}
  required_pre_merge_status_checks:
    name: Status checks required before merge
    needs: required_pre_merge_status_checks_marker
    if: github.event_name == 'pull_request' && always()
    runs-on: ubuntu-latest
    timeout-minutes: 1
    steps:
      - name: Verify all required status checks passed
        env:
          requirements_passed: ${{ needs.required_pre_merge_status_checks_marker.outputs.success }}
        run: |
          if [[ $requirements_passed == "true" ]]; then
            echo "✅ The pull request passed all required status checks."
            exit 0
          else
            echo "❗ Some of the required status checks failed or did not run."
            exit 1
          fi
